"""
``run`` contains functions for interacting with MCNP.

``run`` packages the ``Run`` utility class, providing an object-oriented,
importable interface for running MCNP INP files.
"""

import os
import sys
from typing import Final, Callable

import docopt

from .. import files
from . import _state
from . import _io


DEFAULT_NPP = 1000
DEFAULT_NPSMG = 1


class Run:
    """
    ``Run`` encapsulates methods for running MCNP INP files.

    ``Run`` provides utilities for executing MCNP simulations concurrently or
    in parallel. This class also stores the inputs and outputs of MNPC runs
    in timestamped directories.

    Attributes:
        inp: PyMCNP INP object to run.
        path: Path to directory to store run inputs and outputs.
        command: Terminal command to execute.
    """

    def __init__(
        self,
        inp: files.inp.Inp,
        path: str = '.',
        command: str = 'mcnp',
        prehook: Callable = lambda _: _,
        posthook: Callable = lambda _: _,
    ):
        """
        ``__init__`` initalizes ``Run``.

        Parameters:
            path: Path to directory to store run inputs and outputs.
            command: Terminal command to execute.
        """

        self.path: Final[str] = path
        self.command: Final[str] = command
        self.inp: Final[files.inp.Inp] = inp
        self.prehook: Final[Callable] = prehook
        self.posthook: Final[Callable] = posthook

    def _run(self, path) -> str:
        self.prehook()
        sys.stdout.flush()
        os.system(f'{self.command} {path}')
        self.posthook()

    def run_single(self) -> str:
        """
        ``run_single`` runs MCNP INP files.

        ``run_single`` creates a directory to store a copy of the input file
        passed to MCNP and the outputfiles generated by MCNP.

        Returns:
            Path to run directory.
        """

        timestamp = _io.get_timestamp()

        directory_path = f'{self.path}/pymcnp-run-{timestamp}'
        os.mkdir(directory_path)

        inp_path = f'{directory_path}/pymcnp-inp-{timestamp}.inp'
        self.inp.to_mcnp_file(inp_path)

        _state.run.set_command(self.command)
        _state.run.set_prehook(self.prehook)
        _state.run.set_posthook(self.posthook)

        os.system(f'pymcnp run --path={inp_path}')

        return directory_path

    def run_parallel(self, count: int) -> str:
        """
        ``run_parallel`` runs MCNP INP files in parallel.

        ``run_parallel`` creates a directory to store a copy of the input file
        passed to MCNP and directories containing each seperate run output
        files. This method works by dividing the INP particles histories and
        running the MCNP simulation many times concurrently.

        Parameters:
            count: Number of parallel threads to run.

        Returns:
            Path to run directory.
        """

        if count <= 0:
            _io.error('Invalid Count.')

        timestamp = _io.get_timestamp()

        directory_path = f'{self.path}/pymcnp-runs-{timestamp}'
        os.mkdir(directory_path)

        inp_path = f'{directory_path}/pymcnp-inp-{timestamp}.inp'
        self.inp.to_mcnp_file(inp_path)

        if 'nps' in self.inp.data:
            self.inp.data['nps'].npp //= count
        else:
            self.inp.data.append(files.inp.datum.HistoryCutoff(DEFAULT_NPP // count, DEFAULT_NPSMG))

        args = []
        for n in range(0, count):
            subdirectory_path = f'{directory_path}/pymcnp-run-{n}'
            os.mkdir(subdirectory_path)

            inp_path = f'{subdirectory_path}/pymcnp-inp-{timestamp}-{n}.inp'

            self.inp.to_mcnp_file(inp_path)

            args.append(f'--path={inp_path}')

        _state.run.set_command(self.command)
        _state.run.set_prehook(self.prehook)
        _state.run.set_posthook(self.posthook)

        # Executing single run in parallel.
        os.system(f"parallel pymcnp run ::: {' '.join(args)}")

        return directory_path


PYMCNP_RUN_DOC = """
Usage:
    pymcnp run ( <alias> | --object=<alias> | --file=<file> | --path=<file> ) [ --parallel=<threads> ]

Options:
    -o --object=<alias>           Run from PyMCNP objects.
    -f --file=<file>              Run from filename.
    -p --path=<file>              Run from path without help.
    -p --parallel=<threads>       Run files in parallel on <threads> threads.
    -d --directory=<path>         Path to excecute run.
"""


def main(argv: list[str] = sys.argv[1:]) -> None:
    """
    ``main`` executes the ``pymcnp run`` command.

    ``main`` processes the given command line arguments, and it runs either INP
    files or PyMCNP aliased INP files single or in parallel.

    Parameters:
        argv: Tokenized list of CLI arguments.
    """

    args = docopt.docopt(PYMCNP_RUN_DOC, argv=argv)

    if args['<alias>'] is not None:
        # Running aliased PyMCNP object.
        try:
            filename = _state.table.access(args['<alias>'])
        except ValueError:
            print('NOPE!')
            exit(1)
        inp = files.inp.Inp.from_mcnp_file(filename)
        run = Run(
            inp,
            path='.',
            command=_state.run.command,
            prehook=_state.run.prehook,
            posthook=_state.run.posthook,
        )
    elif args['--object'] is not None:
        # Running aliased PyMCNP object.
        try:
            filename = _state.table.access(args['--object'])
        except ValueError:
            print('NOPE!')
            exit(1)
        inp = files.inp.Inp.from_mcnp_file(filename)
        run = Run(
            inp,
            path='.',
            command=_state.run.command,
            prehook=_state.run.prehook,
            posthook=_state.run.posthook,
        )
    elif args['--file'] is not None:
        # Running from INP files.
        inp = files.inp.Inp.from_mcnp_file(args['--file'])
        run = Run(
            inp,
            path='.',
            command=_state.run.command,
            prehook=_state.run.prehook,
            posthook=_state.run.posthook,
        )
    elif args['--path'] is not None:
        # Running from INP files.
        inp = files.inp.Inp.from_mcnp_file(args['--path'])
        run = Run(
            inp,
            path='.',
            command=_state.run.command,
            prehook=_state.run.prehook,
            posthook=_state.run.posthook,
        )

    if args['--parallel'] is not None:
        run.run_parallel(int(args['--parallel']))
    else:
        if args['--path'] is not None:
            run._run(args['--path'])
        else:
            run.run_single()
