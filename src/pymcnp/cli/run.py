"""
Usage:
    pymcnp run <file> [ --parallel=<threads> ] [ options ]

Options:
    -p --parallel=<threads>       Run files in parallel on <threads> threads.
    -c --command=<command>        Command to run.
    -P --path=<path>              Path to use.
"""

import os
import inspect
from typing import Final
from pathlib import Path

from docopt import docopt

from .. import files
from . import _io


DEFAULT_NPP = 1000
DEFAULT_NPSMG = 1


class Run:
    """
    Encapsulates methods for running MCNP INP files.

    ``Run`` provides utilities for executing MCNP simulations concurrently or
    in parallel. This class also stores the inputs and outputs of MNPC runs
    in timestamped directories.

    Attributes:
        inp: PyMCNP INP object to run.
        path: Path to directory to store run inputs and outputs.
        command: Terminal command to execute.
    """

    def __init__(
        self,
        inp: files.inp.Inp,
        path: str = '.',
        command: str = 'mcnp',
    ):
        """
        Parameters:
            path: Path to directory to store run inputs and outputs.
            command: Terminal command to execute.
        """

        self.path: Final[str] = path
        self.command: Final[str] = command
        self.inp: Final[files.inp.Inp] = inp

    @staticmethod
    def prehook():
        pass

    @staticmethod
    def posthook():
        pass

    @staticmethod
    def parallel_prehook():
        pass

    @staticmethod
    def parallel_posthook():
        pass

    def run_single(self) -> str:
        """
        Runs MCNP INP files.

        ``run_single`` creates a directory to store a copy of the input file
        passed to MCNP and the outputfiles generated by MCNP.

        Returns:
            Path to run directory.
        """

        timestamp = _io.get_timestamp()

        directory_path = f'{self.path}/pymcnp-run-{timestamp}'
        os.mkdir(directory_path)

        inp_path = f'{directory_path}/pymcnp-inp-{timestamp}.inp'
        self.inp.to_mcnp_file(inp_path)

        self.prehook()
        os.system(f'{self.command} {inp_path}')
        self.posthook()

        return directory_path

    def run_parallel(self, count: int) -> str:
        """
        Runs MCNP INP files in parallel.

        ``run_parallel`` creates a directory to store a copy of the input file
        passed to MCNP and directories containing each seperate run output
        files. This method works by dividing the INP particles histories and
        running the MCNP simulation many times concurrently.

        Parameters:
            count: Number of parallel threads to run.

        Returns:
            Path to run directory.
        """

        if count <= 0:
            _io.error('Invalid Count.')

        timestamp = _io.get_timestamp()

        directory_path = f'{self.path}/pymcnp-runs-{timestamp}'
        os.mkdir(directory_path)

        inp_path = f'{directory_path}/pymcnp-inp-{timestamp}.inp'
        self.inp.to_mcnp_file(inp_path)

        if 'nps' in self.inp.data:
            self.inp.data['nps'].npp.value //= count
        else:
            self.inp.data.append(files.inp.datum.HistoryCutoff(DEFAULT_NPP // count, DEFAULT_NPSMG))

        args = []
        for n in range(0, count):
            subdirectory_path = f'{directory_path}/pymcnp-run-{n}'
            os.mkdir(subdirectory_path)

            inp_path = f'{subdirectory_path}/pymcnp-inp-{timestamp}-{n}.inp'
            self.inp.to_mcnp_file(inp_path)

            script_path = f'{subdirectory_path}/pymcnp-python-{timestamp}-{n}.py'
            with open(script_path, 'w') as file:
                file.write(
                    f"import os\n"
                    f"def parallel_prehook():\n"
                    f"{''.join(line[4:] for line in inspect.getsourcelines(self.parallel_prehook)[0][2:])}\n"
                    f"def parallel_posthook():\n"
                    f"{''.join(line[4:] for line in inspect.getsourcelines(self.parallel_posthook)[0][2:])}\n"
                    f'if __name__ == "__main__":\n'
                    f"    parallel_prehook()\n"
                    f'    os.system("{self.command} {inp_path}")\n'
                    f"    parallel_posthook()"
                )

            args.append(f'{script_path}')

        self.prehook()
        os.system(f"parallel python3 ::: {' '.join(args)}")
        self.posthook()

        return directory_path


def main() -> None:
    """
    Executes the ``pymcnp run`` command.

    ``main`` processes the given command line arguments, and it runs either INP
    files single or in parallel.
    """

    args = docopt(__doc__)

    inp = files.inp.Inp.from_mcnp_file(args['<file>'])
    command = args['--command'] if args['--command'] else 'mcnp6'
    path = args['--path'] if args['--path'] else Path.csw()

    run = Run(inp, path=path, command=command)

    if args['--parallel'] is not None:
        run.run_parallel(int(args['--parallel']))
    else:
        run.run_single()
