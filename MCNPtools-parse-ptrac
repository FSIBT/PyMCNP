#!/usr/bin/env python3

"""
Usage:
    MCNPtools-parse_ptrac filter <filter> <filename> [options]


Options:
   -h  --help                        This information
   -o <output>  --output=<output>    Output file name


filter can be one of:
  gammas:     creates several output files, one for each element
  neutrons:   creates several output files, one for each element
  plot:       produces: [alpha_xyz, alpha_time,  neutron_xyzuvw,
                              atom/gamma_xyzuvw, detected-gamma_xyz]
"""


from docopt import docopt
from collections import namedtuple
import numpy as np
import h5py
import mcnptools

commands = docopt(__doc__)
# print(commands)


input = commands["<filename>"]
filter = commands["<filter>"]
output = commands["-o"]


class HistoryHandlerGammas:
    def __init__(self):
        self.output_files = {}

    def __call__(self, hist):
        for h in hist.history:
            if h.event_type == "Photon from Neutron":
                element = str(h.nxs)
                outf = self.output_files.get(element, None)
                if not outf:
                    outf = open(f"{input}-output-{element}.txt", "w")
                    self.output_files[element] = outf
                outf.write(
                    f"{h.pos.x} {h.pos.y} {h.pos.z} {h.dir.u} {h.dir.v} {h.dir.w} {h.energy} {h.weight} {h.time}\n"
                )

    def close(self):
        for f in self.output_files.values():
            f.close()


class HistoryHandlerNeutrons(mcnptools.parse_ptrac.HistoryHandler):
    def __call__(self, hist):
        for h in hist.history:
            if h.event_type == "initial source" and h.particle == "neutron":
                self.output_file.write(
                    "source NA {h.pos.x} {h.pos.y} {h.pos.z} {h.dir.u} {h.dir.v} {h.dir.w} {h.energy} NA\n"
                )
            if h.event_type == "Photon from Neutron":
                self.output_file.write(
                    "photon {h.pos.x} {h.pos.y} {h.pos.z} {h.dir.u} {h.dir.v} {h.dir.w} {h.energy} {h.nxs}\n"
                )
                if (
                    h.event_type == "collision"
                    and h.energy > 0.001
                    and h.particle == "neutron"
                ):
                    self.output_file.write(
                        "collision {h.pos.x} {h.pos.y} {h.pos.z} {h.dir.u} {h.dir.v} {h.dir.w} {h.energy} {h.nxs}"
                    )


if __name__ == "__main__":
    if output:
        if filter == "gammas":
            handler = HistoryHandlerGammas()
        elif filter == "neutrons":
            handler = HistoryHandlerNeutrons(f"{input}-output-neutrons.txt")
        else:
            handler = mcnptools.parse_ptrac.HistoryHandler(f"{input}-output.txt")

        mcnptools.parse_ptrac.read_file(input, handler)
        handler.close()

    else:
        header = mcnptools.parse_ptrac.read_file(input)
        print(header)
